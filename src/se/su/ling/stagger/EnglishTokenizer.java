/* The following code was generated by JFlex 1.7.0 */

package se.su.ling.stagger;
import java.util.*;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/ikwattro/dev/stagger/src/EnglishTokenizer.flex</tt>
 */
public class EnglishTokenizer extends Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\1\105\1\105\1\14\22\0\1\102\1\52\1\55"+
    "\1\30\1\37\1\31\1\30\1\36\1\46\1\42\1\55\1\31\1\51"+
    "\1\27\1\26\1\24\1\20\1\103\1\104\1\45\6\20\1\6\1\34"+
    "\1\44\1\41\1\50\1\53\1\32\2\33\1\76\1\5\1\73\1\23"+
    "\1\101\1\21\1\11\3\33\1\77\1\74\1\40\1\22\1\33\1\100"+
    "\1\10\1\3\1\75\1\33\1\25\1\33\1\47\1\33\1\1\1\30"+
    "\1\12\1\43\1\7\1\55\2\33\1\76\1\5\1\73\1\23\1\101"+
    "\1\21\1\11\3\33\1\77\1\74\1\40\1\22\1\33\1\100\1\10"+
    "\1\3\1\75\1\33\1\25\1\35\1\47\1\33\3\55\1\30\6\0"+
    "\1\16\32\0\1\13\37\55\27\60\1\55\37\60\1\55\70\60\2\4"+
    "\115\60\1\2\u01f0\0\220\61\u0200\0\140\62\12\63\206\62\12\63\6\62"+
    "\120\0\60\62\100\0\12\17\u0136\0\146\64\12\65\20\64\146\0\12\17"+
    "\166\0\12\17\166\0\12\17\166\0\12\17\166\0\12\17\166\0\12\17"+
    "\166\0\12\17\166\0\12\17\166\0\12\17\140\0\12\17\166\0\12\17"+
    "\106\0\12\17\u0116\0\12\17\106\0\12\17\146\0\u0100\67\u05e0\0\12\17"+
    "\46\0\12\17\u012c\0\12\17\200\0\12\17\246\0\12\17\6\0\12\17"+
    "\266\0\12\17\126\0\12\17\206\0\12\17\6\0\12\17\166\0\60\64"+
    "\u0200\0\u0100\61\16\13\2\0\6\54\22\55\1\57\1\57\33\55\u0fbb\0"+
    "\1\56\37\55\40\0\300\66\60\0\140\67\u0270\0\u19c0\70\100\0\u5200\70"+
    "\u0620\0\12\17\u02a6\0\12\17\6\0\40\64\12\17\126\0\40\67\120\0"+
    "\12\17\26\0\12\17\126\0\12\17\u0196\0\12\17\u2bb6\0\120\67\100\72"+
    "\60\71\u0790\72\u1b50\0\u02b0\62\160\0\220\62\20\0\12\17\113\0\73\66"+
    "\u0500\0\12\17\u0bbc\0\12\17\200\0\12\17\74\0\12\17\220\0\12\17"+
    "\u0116\0\12\17\u0156\0\12\17\166\0\12\17\u0176\0\12\17\146\0\12\17"+
    "\146\0\12\17\u01a6\0\12\17\u0366\0\12\17\u4e06\0\12\17\346\0\12\17"+
    "\u6c74\0\62\17\u1150\0\12\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\4\3\2\2\2\3\1\2\1\4"+
    "\1\0\1\5\2\6\3\3\1\2\1\3\1\7\1\10"+
    "\1\3\2\2\1\3\6\2\1\7\1\10\2\2\1\11"+
    "\1\12\1\6\1\13\1\6\1\14\1\15\1\16\1\1"+
    "\2\3\2\6\4\0\1\3\4\0\1\3\1\0\1\3"+
    "\1\17\3\0\1\3\1\17\3\0\1\20\1\0\1\21"+
    "\1\0\1\3\2\0\3\3\1\6\1\0\1\2\1\17"+
    "\2\0\1\3\2\0\1\17\1\0\1\17\1\2\1\0"+
    "\1\17\1\0\1\3\2\0\2\3\1\0\1\3\1\0"+
    "\1\3\7\0\3\3\2\6\1\0\1\6\3\3\3\17"+
    "\1\6\3\0\2\22\4\0\1\3\1\6\1\3\1\0"+
    "\1\3\4\0\1\22\1\0\1\23\2\0\1\22\2\0"+
    "\1\23\2\22\1\24\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\106\0\214\0\322\0\u0118\0\u015e\0\u01a4\0\u01ea"+
    "\0\u0230\0\u0276\0\u02bc\0\106\0\u0302\0\u0348\0\u038e\0\u03d4"+
    "\0\u041a\0\u0460\0\u04a6\0\u04ec\0\u0532\0\u0578\0\u05be\0\u0604"+
    "\0\u064a\0\u0690\0\u06d6\0\u071c\0\u0762\0\u07a8\0\u07ee\0\u0834"+
    "\0\u087a\0\u08c0\0\u0906\0\106\0\u0302\0\u038e\0\u094c\0\u0992"+
    "\0\u09d8\0\u0a1e\0\u0a64\0\106\0\106\0\106\0\u0aaa\0\u0af0"+
    "\0\u0b36\0\u0b7c\0\u0bc2\0\u0c08\0\u0c4e\0\u0c94\0\u0230\0\u0cda"+
    "\0\u0d20\0\u0d66\0\u0dac\0\u0df2\0\u0e38\0\u0e7e\0\u0ec4\0\106"+
    "\0\u0f0a\0\u06d6\0\u07a8\0\u0f50\0\u0f96\0\u0f96\0\u0fdc\0\u1022"+
    "\0\u0302\0\u1068\0\u10ae\0\u10f4\0\u113a\0\u1180\0\u11c6\0\u120c"+
    "\0\u1252\0\u1298\0\u12de\0\u1324\0\u136a\0\u13b0\0\u13f6\0\u143c"+
    "\0\106\0\u1482\0\u14c8\0\u0762\0\u150e\0\u07ee\0\u1554\0\u159a"+
    "\0\u15e0\0\u1626\0\u166c\0\u16b2\0\u16f8\0\u173e\0\u1784\0\u17ca"+
    "\0\u1810\0\u1856\0\u189c\0\u18e2\0\u1928\0\u196e\0\u19b4\0\u19fa"+
    "\0\u1a40\0\u1a86\0\u1acc\0\u0d20\0\u1b12\0\u10f4\0\u0cda\0\u1b58"+
    "\0\u11c6\0\u1b9e\0\u1be4\0\u1c2a\0\u1c70\0\u0230\0\u1cb6\0\322"+
    "\0\u1cfc\0\u1d42\0\u1d88\0\106\0\u0230\0\u1dce\0\u1e14\0\u1e5a"+
    "\0\u1ea0\0\u0230\0\106\0\u1ee6\0\u1f2c\0\u1f72\0\u1fb8\0\u1ffe"+
    "\0\u2044\0\u208a\0\u20d0\0\u2116\0\u215c\0\u21a2\0\u21e8\0\u222e"+
    "\0\u2274\0\u22ba\0\u2300\0\u2346\0\u238c\0\106\0\u1a86";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\2\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\14"+
    "\1\11\1\14\1\5\1\10\1\31\1\32\1\33\1\34"+
    "\1\35\1\36\1\37\1\40\1\21\1\41\1\5\1\14"+
    "\1\42\2\43\1\44\1\14\1\45\1\46\1\4\1\47"+
    "\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57"+
    "\1\2\1\60\3\5\1\61\2\5\1\15\1\62\1\63"+
    "\111\0\1\64\5\0\1\64\77\0\4\4\2\0\2\4"+
    "\6\0\4\4\1\0\1\4\1\0\1\65\3\0\1\4"+
    "\1\0\1\4\1\66\1\0\1\4\4\0\1\4\1\0"+
    "\1\4\10\0\1\4\12\0\7\4\1\0\2\4\3\0"+
    "\1\4\1\5\1\4\1\5\1\0\1\67\2\5\6\0"+
    "\1\70\3\5\1\0\1\5\1\71\1\72\1\0\1\67"+
    "\1\73\1\5\1\0\1\5\1\66\1\0\1\5\4\0"+
    "\1\70\1\0\1\5\10\0\1\4\12\0\7\5\1\0"+
    "\2\70\3\0\4\4\2\0\2\4\6\0\4\4\1\0"+
    "\1\4\1\74\1\65\3\0\1\4\1\0\1\4\1\66"+
    "\1\0\1\4\4\0\1\4\1\0\1\4\10\0\1\4"+
    "\12\0\1\75\6\4\1\76\2\4\3\0\1\4\1\5"+
    "\1\4\1\77\1\100\1\67\1\12\1\5\6\0\1\70"+
    "\1\5\1\77\1\5\1\0\1\5\1\71\1\101\1\0"+
    "\1\67\1\73\1\5\1\100\1\5\1\66\1\102\1\5"+
    "\1\100\1\103\2\0\1\70\1\103\1\5\10\0\1\4"+
    "\12\0\5\5\1\104\1\5\1\0\2\70\6\0\1\105"+
    "\2\0\1\105\11\0\1\105\4\0\1\106\6\0\1\107"+
    "\1\105\1\100\1\0\1\105\3\0\1\105\42\0\1\67"+
    "\1\0\1\67\1\0\3\67\6\0\4\67\1\0\3\67"+
    "\1\0\1\67\1\73\1\67\1\0\1\67\2\0\1\67"+
    "\4\0\1\67\1\0\1\67\23\0\7\67\1\0\2\67"+
    "\3\0\1\4\1\5\1\4\1\12\1\100\1\67\1\12"+
    "\1\5\6\0\1\70\1\5\1\12\1\5\1\0\1\5"+
    "\1\71\1\101\1\0\1\67\1\73\1\5\1\100\1\5"+
    "\1\66\1\102\1\5\1\0\1\102\2\0\1\70\1\102"+
    "\1\5\10\0\1\4\12\0\7\5\1\0\2\70\3\0"+
    "\1\4\1\5\1\4\1\5\1\0\1\67\2\5\6\0"+
    "\1\70\3\5\1\0\1\5\1\110\1\72\1\0\1\67"+
    "\1\73\1\5\1\0\1\5\1\66\1\0\1\5\4\0"+
    "\1\70\1\0\1\5\10\0\1\4\12\0\1\104\6\5"+
    "\1\76\2\70\14\0\1\111\1\16\2\17\37\0\1\111"+
    "\1\17\22\0\1\111\20\0\1\17\103\0\1\17\1\112"+
    "\2\113\37\0\1\17\1\113\22\0\1\17\22\0\2\20"+
    "\5\0\1\114\16\0\1\20\15\0\1\20\1\0\1\20"+
    "\15\0\2\20\3\0\1\4\1\115\1\4\1\70\1\116"+
    "\1\67\2\70\5\0\1\20\1\21\3\70\1\0\1\70"+
    "\1\117\1\72\1\0\1\67\1\73\1\70\1\0\1\70"+
    "\1\66\1\0\1\70\4\0\1\21\1\0\1\70\10\0"+
    "\1\4\2\0\1\20\1\0\1\20\5\0\7\70\1\0"+
    "\1\62\1\63\3\0\1\4\1\24\1\4\1\5\1\0"+
    "\1\67\2\5\6\0\1\70\3\5\1\0\1\5\1\71"+
    "\1\72\1\0\1\67\1\73\1\5\1\0\1\5\1\66"+
    "\1\0\1\5\4\0\1\70\1\0\1\5\10\0\1\4"+
    "\12\0\7\5\1\0\2\70\3\0\1\4\1\5\1\4"+
    "\1\77\1\100\1\67\1\12\1\5\6\0\1\70\1\5"+
    "\1\77\1\5\1\0\1\5\1\71\1\101\1\0\1\67"+
    "\1\73\1\5\1\100\1\5\1\66\1\102\1\5\1\100"+
    "\1\103\2\0\1\70\1\103\1\5\10\0\1\4\12\0"+
    "\5\5\1\120\1\5\1\0\2\70\3\0\1\4\1\121"+
    "\1\4\1\5\1\0\1\67\2\5\6\0\1\70\3\5"+
    "\1\0\1\5\1\71\1\72\1\0\1\67\1\73\1\5"+
    "\1\0\1\5\1\66\1\0\1\5\4\0\1\70\1\0"+
    "\1\5\10\0\1\4\12\0\7\5\1\0\2\70\25\0"+
    "\1\25\63\0\1\4\1\5\1\4\1\5\1\0\1\67"+
    "\2\5\6\0\1\70\3\5\1\0\1\122\1\71\1\72"+
    "\1\0\1\67\1\73\1\5\1\0\1\5\1\66\1\0"+
    "\1\5\4\0\1\70\1\0\1\5\10\0\1\4\12\0"+
    "\7\5\1\0\2\70\4\0\1\67\1\0\1\67\1\0"+
    "\3\67\6\0\4\67\1\0\1\67\1\27\1\67\1\0"+
    "\1\67\1\73\1\67\1\0\1\67\2\0\1\67\4\0"+
    "\1\67\1\0\1\67\2\0\2\43\17\0\7\67\1\0"+
    "\2\67\4\0\1\67\1\0\1\67\1\0\3\67\5\0"+
    "\1\20\1\123\3\67\1\0\2\67\1\124\1\0\1\67"+
    "\1\73\1\67\1\0\1\67\2\0\1\67\4\0\1\123"+
    "\1\0\1\67\1\125\12\0\1\20\1\0\1\20\5\0"+
    "\7\67\1\0\2\123\3\0\1\4\1\5\1\4\1\126"+
    "\1\0\1\67\1\126\1\5\6\0\1\70\1\5\1\126"+
    "\1\5\1\0\1\5\1\71\1\127\1\0\1\67\1\73"+
    "\1\5\1\0\1\5\1\130\1\105\1\5\1\0\1\105"+
    "\2\0\1\70\1\105\1\5\10\0\1\4\12\0\7\5"+
    "\1\0\2\70\3\0\1\131\5\0\1\131\102\0\1\102"+
    "\1\100\1\0\1\102\11\0\1\102\4\0\1\132\4\0"+
    "\1\100\2\0\1\102\2\0\1\102\3\0\1\102\41\0"+
    "\1\4\1\5\1\4\1\5\1\0\1\133\2\5\6\0"+
    "\1\70\3\5\1\0\1\5\1\71\1\72\1\0\1\67"+
    "\1\73\1\5\1\0\1\5\1\66\1\0\1\5\4\0"+
    "\1\70\1\0\1\5\10\0\1\4\12\0\7\5\1\0"+
    "\2\70\6\0\1\134\14\0\1\134\17\0\1\134\3\0"+
    "\1\134\44\0\1\103\1\100\1\0\1\102\11\0\1\103"+
    "\4\0\1\132\4\0\1\100\2\0\1\102\1\0\1\100"+
    "\1\103\3\0\1\103\46\0\1\135\33\0\1\136\71\0"+
    "\1\137\14\0\1\140\1\141\45\0\1\103\1\100\1\0"+
    "\1\102\11\0\1\103\4\0\1\132\4\0\1\100\2\0"+
    "\1\102\1\0\1\100\1\103\3\0\1\103\1\142\107\0"+
    "\1\42\106\0\2\43\113\0\1\47\106\0\2\50\41\0"+
    "\2\20\5\0\1\114\16\0\1\20\14\0\1\50\1\51"+
    "\1\0\1\20\15\0\2\20\65\0\2\52\37\0\2\20"+
    "\5\0\1\114\16\0\1\20\15\0\1\20\1\52\1\53"+
    "\15\0\2\20\72\0\2\56\15\0\1\4\1\143\1\4"+
    "\1\5\1\0\1\67\2\5\6\0\1\70\3\5\1\0"+
    "\1\5\1\144\1\72\1\0\1\67\1\73\1\5\1\0"+
    "\1\5\1\66\1\0\1\5\4\0\1\70\1\0\1\5"+
    "\10\0\1\4\12\0\6\5\1\104\1\145\2\70\3\0"+
    "\1\4\1\5\1\4\1\5\1\0\1\67\2\5\6\0"+
    "\1\70\3\5\1\0\1\5\1\71\1\72\1\0\1\67"+
    "\1\73\1\5\1\0\1\5\1\66\1\0\1\5\4\0"+
    "\1\70\1\0\1\5\10\0\1\4\12\0\5\5\1\146"+
    "\1\5\1\0\2\70\3\0\1\147\1\115\1\4\1\70"+
    "\1\150\1\67\1\151\1\70\5\0\1\20\1\21\3\70"+
    "\1\0\1\70\1\117\1\72\1\0\1\67\1\73\1\70"+
    "\1\0\1\70\1\66\1\0\1\70\4\0\1\21\1\0"+
    "\1\70\10\0\1\4\2\0\1\20\1\0\1\20\5\0"+
    "\7\70\1\0\1\62\1\63\3\0\1\4\1\115\1\4"+
    "\1\70\1\152\1\67\2\70\5\0\1\20\1\21\3\70"+
    "\1\0\1\70\1\117\1\72\1\0\1\67\1\73\1\70"+
    "\1\0\1\70\1\66\1\0\1\70\4\0\1\21\1\0"+
    "\1\70\10\0\1\4\2\0\1\20\1\0\1\20\5\0"+
    "\1\70\1\153\3\70\1\153\1\70\1\0\1\62\1\63"+
    "\4\0\1\154\104\0\4\4\2\0\2\4\6\0\4\4"+
    "\1\0\1\4\5\0\1\4\1\0\1\4\2\0\1\4"+
    "\4\0\1\4\1\0\1\4\10\0\1\4\12\0\7\4"+
    "\1\0\2\4\4\0\1\131\104\0\1\4\1\70\1\4"+
    "\1\70\1\0\1\67\2\70\6\0\4\70\1\0\1\70"+
    "\1\67\1\72\1\0\1\67\1\73\1\70\1\0\1\70"+
    "\1\66\1\0\1\70\4\0\1\70\1\0\1\70\10\0"+
    "\1\4\12\0\7\70\1\0\2\70\3\0\1\155\1\67"+
    "\1\0\1\67\1\0\1\67\1\156\1\67\6\0\4\67"+
    "\1\0\3\67\1\0\1\67\1\73\1\67\1\0\1\67"+
    "\2\0\1\157\4\0\1\67\1\0\1\67\23\0\1\67"+
    "\1\160\1\67\1\161\3\67\1\0\2\67\3\0\1\4"+
    "\1\70\1\4\1\70\1\0\1\67\2\70\6\0\4\70"+
    "\1\0\1\70\2\67\1\0\1\67\1\73\1\70\1\0"+
    "\1\70\2\0\1\70\4\0\1\70\1\0\1\70\10\0"+
    "\1\4\12\0\7\70\1\0\2\70\4\0\1\162\1\0"+
    "\1\162\2\0\2\162\6\0\4\162\1\0\3\162\3\0"+
    "\1\162\1\0\1\162\2\0\1\162\4\0\1\162\1\0"+
    "\1\162\23\0\7\162\1\0\2\162\74\0\1\163\6\0"+
    "\1\76\5\0\4\4\2\0\2\4\6\0\4\4\1\0"+
    "\1\4\1\131\1\65\3\0\1\4\1\0\1\4\1\66"+
    "\1\0\1\4\4\0\1\4\1\0\1\4\10\0\1\4"+
    "\12\0\7\4\1\0\2\4\74\0\1\163\14\0\1\4"+
    "\1\5\1\4\1\77\1\100\1\67\1\12\1\5\6\0"+
    "\1\70\1\5\1\77\1\5\1\0\1\5\1\71\1\101"+
    "\1\0\1\67\1\73\1\5\1\100\1\5\1\66\1\102"+
    "\1\5\1\100\1\103\2\0\1\70\1\103\1\5\10\0"+
    "\1\4\12\0\7\5\1\0\2\70\3\0\1\4\1\70"+
    "\1\4\1\70\1\100\1\67\2\70\6\0\4\70\1\0"+
    "\1\70\2\67\1\0\1\67\1\73\1\70\1\100\1\70"+
    "\2\0\1\70\4\0\1\70\1\0\1\70\10\0\1\4"+
    "\12\0\7\70\1\0\2\70\3\0\1\4\1\5\1\4"+
    "\1\5\1\0\1\67\2\5\6\0\1\70\3\5\1\0"+
    "\1\5\1\164\1\72\1\0\1\67\1\73\1\5\1\0"+
    "\1\5\1\66\1\0\1\5\4\0\1\70\1\0\1\5"+
    "\10\0\1\4\12\0\7\5\1\0\2\70\6\0\1\105"+
    "\2\0\1\105\11\0\1\105\14\0\1\105\2\0\1\105"+
    "\3\0\1\105\44\0\1\105\2\0\1\105\11\0\1\105"+
    "\4\0\1\106\7\0\1\105\2\0\1\105\3\0\1\105"+
    "\41\0\1\155\1\67\1\0\1\67\1\0\1\67\1\156"+
    "\1\67\6\0\4\67\1\0\3\67\1\0\1\67\1\73"+
    "\1\67\1\0\1\67\2\0\1\157\4\0\1\67\1\0"+
    "\1\67\23\0\1\165\1\160\1\67\1\161\3\67\1\76"+
    "\2\67\16\0\1\113\103\0\1\113\1\112\2\113\37\0"+
    "\2\113\22\0\1\113\22\0\2\166\24\0\1\166\15\0"+
    "\1\166\1\0\1\166\15\0\2\166\3\0\1\4\1\70"+
    "\1\4\1\70\1\0\1\67\2\70\6\0\1\70\1\167"+
    "\2\70\1\0\1\70\1\67\1\72\1\0\1\67\1\73"+
    "\1\70\1\0\1\70\1\66\1\0\1\70\4\0\1\70"+
    "\1\0\1\70\10\0\1\4\12\0\7\70\1\0\2\70"+
    "\4\0\1\170\105\0\1\67\1\0\1\67\1\0\3\67"+
    "\5\0\1\166\1\171\3\67\1\0\3\67\1\0\1\67"+
    "\1\73\1\67\1\0\1\67\2\0\1\67\4\0\1\171"+
    "\1\0\1\67\13\0\1\166\1\0\1\166\5\0\7\67"+
    "\1\0\2\171\3\0\1\4\1\5\1\4\1\5\1\0"+
    "\1\67\2\5\6\0\1\70\3\5\1\0\1\5\1\71"+
    "\1\72\1\0\1\67\1\73\1\5\1\0\1\5\1\66"+
    "\1\0\1\172\4\0\1\70\1\0\1\5\10\0\1\4"+
    "\12\0\7\5\1\0\2\70\3\0\1\4\1\5\1\4"+
    "\1\5\1\0\1\67\2\5\6\0\1\70\1\5\1\173"+
    "\1\5\1\0\1\5\1\71\1\72\1\0\1\67\1\73"+
    "\1\5\1\0\1\5\1\66\1\0\1\5\4\0\1\70"+
    "\1\0\1\5\10\0\1\4\12\0\7\5\1\0\2\70"+
    "\3\0\1\4\1\5\1\4\1\5\1\0\1\67\2\5"+
    "\6\0\1\70\3\5\1\0\1\174\1\71\1\72\1\0"+
    "\1\67\1\73\1\5\1\0\1\5\1\66\1\0\1\5"+
    "\4\0\1\70\1\0\1\5\10\0\1\4\12\0\7\5"+
    "\1\0\2\70\4\0\1\67\1\0\1\67\1\0\3\67"+
    "\5\0\1\20\1\123\3\67\1\0\1\67\1\117\1\67"+
    "\1\0\1\67\1\73\1\67\1\0\1\67\2\0\1\67"+
    "\4\0\1\123\1\0\1\67\13\0\1\20\1\0\1\20"+
    "\5\0\7\67\1\0\2\123\4\0\1\67\1\0\1\67"+
    "\1\0\3\67\6\0\4\67\1\0\2\67\1\124\1\0"+
    "\1\67\1\73\1\67\1\0\1\67\2\0\1\67\4\0"+
    "\1\67\1\0\1\67\1\125\22\0\7\67\1\0\2\67"+
    "\51\0\1\125\37\0\1\4\1\5\1\4\1\126\1\0"+
    "\1\67\1\126\1\5\6\0\1\70\1\5\1\126\1\5"+
    "\1\0\1\5\1\71\1\72\1\0\1\67\1\73\1\5"+
    "\1\0\1\5\1\66\1\105\1\5\1\0\1\105\2\0"+
    "\1\70\1\105\1\5\10\0\1\4\12\0\7\5\1\0"+
    "\2\70\3\0\1\4\1\70\1\4\1\175\1\0\1\67"+
    "\1\175\1\70\6\0\2\70\1\175\1\70\1\0\1\70"+
    "\2\67\1\0\1\67\1\73\1\70\1\0\1\70\1\0"+
    "\1\105\1\70\1\0\1\105\2\0\1\70\1\105\1\70"+
    "\10\0\1\4\12\0\7\70\1\0\2\70\4\0\1\131"+
    "\1\0\1\105\2\0\1\105\11\0\1\105\4\0\1\106"+
    "\7\0\1\105\2\0\1\105\3\0\1\105\45\0\1\100"+
    "\25\0\1\100\54\0\1\67\1\0\1\67\1\0\3\67"+
    "\6\0\4\67\1\0\3\67\1\0\1\67\1\73\1\67"+
    "\1\0\1\67\2\0\1\176\4\0\1\67\1\0\1\67"+
    "\23\0\7\67\1\0\2\67\10\0\1\135\33\0\1\177"+
    "\71\0\1\137\105\0\1\137\14\0\1\140\106\0\1\141"+
    "\102\0\1\100\45\0\1\4\1\5\1\4\1\5\1\0"+
    "\1\67\2\5\6\0\1\70\3\5\1\0\1\5\1\71"+
    "\1\72\1\0\1\67\1\73\1\5\1\0\1\5\1\66"+
    "\1\0\1\5\4\0\1\70\1\0\1\5\10\0\1\4"+
    "\12\0\3\5\1\104\3\5\1\0\2\70\3\0\1\155"+
    "\1\67\1\0\1\67\1\0\1\67\1\156\1\67\6\0"+
    "\4\67\1\0\3\67\1\0\1\67\1\73\1\67\1\0"+
    "\1\67\2\0\1\157\4\0\1\67\1\0\1\67\23\0"+
    "\1\67\1\160\1\67\1\161\2\67\1\165\1\145\2\67"+
    "\102\0\1\163\6\0\1\75\1\5\1\4\1\5\1\0"+
    "\1\67\1\104\1\5\6\0\1\70\3\5\1\0\1\5"+
    "\1\164\1\72\1\0\1\67\1\73\1\5\1\0\1\5"+
    "\1\66\1\0\1\5\4\0\1\70\1\0\1\5\10\0"+
    "\1\4\12\0\7\5\1\0\2\70\3\0\1\4\1\200"+
    "\2\4\2\0\2\4\6\0\4\4\1\0\1\4\1\0"+
    "\1\65\3\0\1\4\1\0\1\4\1\66\1\0\1\4"+
    "\4\0\1\4\1\0\1\4\10\0\1\4\12\0\7\4"+
    "\1\0\2\4\3\0\1\201\1\170\4\0\1\201\77\0"+
    "\1\4\1\167\1\4\1\70\1\0\1\67\2\70\6\0"+
    "\4\70\1\0\1\70\1\67\1\72\1\0\1\67\1\73"+
    "\1\70\1\0\1\70\1\66\1\0\1\70\4\0\1\70"+
    "\1\0\1\70\10\0\1\4\12\0\7\70\1\0\2\70"+
    "\4\0\1\170\70\0\1\202\3\0\1\202\7\0\1\4"+
    "\1\70\1\4\1\167\1\0\1\67\2\70\6\0\4\70"+
    "\1\0\1\70\1\67\1\72\1\0\1\67\1\73\1\70"+
    "\1\0\1\70\1\66\1\0\1\70\4\0\1\70\1\0"+
    "\1\70\10\0\1\4\12\0\7\70\1\0\2\70\5\0"+
    "\1\203\4\0\1\203\167\0\1\204\15\0\1\67\1\0"+
    "\1\67\1\0\3\67\6\0\4\67\1\0\3\67\1\0"+
    "\1\67\1\73\1\67\1\0\1\67\2\0\1\67\4\0"+
    "\1\67\1\0\1\67\23\0\1\205\6\67\1\0\2\67"+
    "\4\0\1\67\1\0\1\67\1\0\3\67\6\0\4\67"+
    "\1\0\3\67\1\0\1\67\1\73\1\67\1\0\1\67"+
    "\2\0\1\67\4\0\1\67\1\0\1\67\23\0\5\67"+
    "\1\206\1\67\1\0\2\67\4\0\1\67\1\0\1\67"+
    "\1\0\3\67\6\0\4\67\1\0\3\67\1\0\1\67"+
    "\1\73\1\67\1\0\1\67\2\0\1\67\4\0\1\67"+
    "\1\0\1\67\23\0\1\207\1\67\1\205\4\67\1\0"+
    "\2\67\4\0\1\67\1\0\1\67\1\0\3\67\6\0"+
    "\4\67\1\0\3\67\1\0\1\67\1\73\1\67\1\0"+
    "\1\67\2\0\1\210\4\0\1\67\1\0\1\67\23\0"+
    "\7\67\1\0\2\67\4\0\1\162\1\0\1\162\2\0"+
    "\2\162\6\0\4\162\1\0\1\162\1\211\1\162\3\0"+
    "\1\162\1\0\1\162\2\0\1\162\4\0\1\162\1\0"+
    "\1\162\23\0\7\162\1\0\2\162\27\0\1\131\62\0"+
    "\1\67\1\0\1\67\1\0\3\67\6\0\4\67\1\0"+
    "\1\67\1\212\1\67\1\0\1\67\1\73\1\67\1\0"+
    "\1\67\2\0\1\67\4\0\1\67\1\0\1\67\23\0"+
    "\7\67\1\0\2\67\22\0\1\213\66\0\1\4\1\5"+
    "\1\4\1\5\1\0\1\67\2\5\6\0\1\70\2\5"+
    "\1\104\1\0\1\5\1\71\1\72\1\0\1\67\1\73"+
    "\1\5\1\0\1\5\1\66\1\0\1\5\4\0\1\70"+
    "\1\0\1\5\10\0\1\4\12\0\7\5\1\0\2\70"+
    "\3\0\1\214\1\5\1\4\1\5\1\215\1\67\1\216"+
    "\1\5\6\0\1\70\3\5\1\0\1\5\1\71\1\72"+
    "\1\0\1\67\1\73\1\5\1\0\1\5\1\66\1\0"+
    "\1\5\4\0\1\70\1\0\1\5\10\0\1\4\12\0"+
    "\7\5\1\0\2\70\3\0\1\4\1\5\1\4\1\5"+
    "\1\0\1\67\2\5\6\0\1\70\3\5\1\0\1\5"+
    "\1\217\1\72\1\0\1\67\1\73\1\5\1\0\1\5"+
    "\1\66\1\0\1\5\4\0\1\70\1\0\1\5\10\0"+
    "\1\4\12\0\7\5\1\0\2\70\3\0\1\4\1\70"+
    "\1\4\1\175\1\0\1\67\1\175\1\70\6\0\2\70"+
    "\1\175\1\70\1\0\1\70\1\67\1\72\1\0\1\67"+
    "\1\73\1\70\1\0\1\70\1\66\1\105\1\70\1\0"+
    "\1\105\2\0\1\70\1\105\1\70\10\0\1\4\12\0"+
    "\7\70\1\0\2\70\44\0\1\177\45\0\1\213\107\0"+
    "\1\213\105\0\1\220\103\0\1\67\1\0\1\67\1\0"+
    "\3\67\6\0\4\67\1\0\3\67\1\0\1\67\1\73"+
    "\1\67\1\0\1\67\2\0\1\67\4\0\1\67\1\0"+
    "\1\67\23\0\6\67\1\205\1\0\2\67\4\0\1\205"+
    "\1\0\1\67\1\0\3\67\6\0\4\67\1\0\3\67"+
    "\1\0\1\67\1\73\1\67\1\0\1\67\2\0\1\67"+
    "\4\0\1\67\1\0\1\67\23\0\7\67\1\0\2\67"+
    "\4\0\1\67\1\0\1\67\1\0\3\67\6\0\4\67"+
    "\1\0\3\67\1\0\1\67\1\73\1\67\1\0\1\67"+
    "\2\0\1\67\4\0\1\67\1\0\1\67\23\0\4\67"+
    "\1\205\2\67\1\0\2\67\4\0\1\221\1\0\1\221"+
    "\2\0\2\221\6\0\1\162\3\221\1\0\1\221\1\211"+
    "\1\162\3\0\1\221\1\0\1\221\2\0\1\221\4\0"+
    "\1\162\1\0\1\221\23\0\7\221\1\0\2\162\3\0"+
    "\4\4\1\215\1\0\2\4\6\0\4\4\1\0\1\4"+
    "\1\0\1\65\3\0\1\4\1\0\1\4\1\66\1\0"+
    "\1\4\4\0\1\4\1\0\1\4\10\0\1\4\12\0"+
    "\7\4\1\0\2\4\25\0\1\222\63\0\1\4\1\5"+
    "\1\4\1\5\1\215\1\67\2\5\6\0\1\70\3\5"+
    "\1\0\1\5\1\71\1\72\1\0\1\67\1\73\1\5"+
    "\1\0\1\5\1\66\1\0\1\5\4\0\1\70\1\0"+
    "\1\5\10\0\1\4\12\0\7\5\1\0\2\70\3\0"+
    "\1\155\1\223\1\0\1\223\1\0\1\67\2\223\6\0"+
    "\4\223\1\0\1\223\1\67\1\223\1\0\1\67\1\73"+
    "\1\223\1\0\1\223\2\0\1\223\4\0\1\223\1\0"+
    "\1\223\23\0\7\223\1\0\2\223\7\0\1\224\102\0"+
    "\1\225\1\0\1\225\2\0\2\225\6\0\1\162\3\225"+
    "\1\0\1\225\1\211\1\162\3\0\1\225\1\0\1\225"+
    "\2\0\1\225\4\0\1\162\1\0\1\225\23\0\7\225"+
    "\1\0\2\162\25\0\1\226\64\0\1\223\1\0\1\223"+
    "\1\227\1\67\2\223\6\0\4\223\1\230\1\223\1\231"+
    "\1\223\1\0\1\67\1\73\1\223\1\0\1\223\2\0"+
    "\1\223\4\0\1\223\1\0\1\223\23\0\7\223\1\0"+
    "\2\223\4\0\1\232\1\0\1\232\1\0\3\232\6\0"+
    "\4\232\1\0\1\232\1\0\1\232\3\0\1\232\1\0"+
    "\1\232\2\0\1\232\4\0\1\232\1\0\1\232\23\0"+
    "\7\232\1\0\2\232\4\0\1\233\1\0\1\233\2\0"+
    "\2\233\6\0\1\162\3\233\1\0\1\233\1\211\1\162"+
    "\3\0\1\233\1\0\1\233\2\0\1\233\4\0\1\162"+
    "\1\0\1\233\23\0\7\233\1\0\2\162\4\0\1\234"+
    "\1\0\1\234\2\0\2\234\6\0\4\234\1\0\1\234"+
    "\1\0\1\234\3\0\1\234\1\0\1\234\2\0\1\234"+
    "\4\0\1\234\1\0\1\234\23\0\7\234\1\0\2\234"+
    "\21\0\1\235\24\0\1\235\35\0\2\235\4\0\1\230"+
    "\1\0\5\230\6\0\16\230\1\0\4\230\2\0\3\230"+
    "\1\0\1\230\1\0\1\230\17\0\7\230\1\0\2\230"+
    "\4\0\1\223\1\0\1\223\1\0\1\67\2\223\6\0"+
    "\4\223\1\0\1\223\1\67\1\223\1\0\1\67\1\73"+
    "\1\223\1\0\1\223\2\0\1\223\4\0\1\223\1\0"+
    "\1\223\23\0\7\223\1\0\2\223\4\0\1\232\1\0"+
    "\1\232\1\0\3\232\1\236\5\0\4\232\1\0\1\232"+
    "\1\0\1\232\3\0\1\232\1\0\1\232\2\0\1\232"+
    "\4\0\1\232\1\0\1\232\23\0\7\232\1\0\2\232"+
    "\4\0\1\237\1\0\1\237\2\0\2\237\6\0\1\162"+
    "\3\237\1\0\1\237\1\211\1\162\3\0\1\237\1\0"+
    "\1\237\2\0\1\237\4\0\1\162\1\0\1\237\23\0"+
    "\7\237\1\0\2\162\4\0\1\234\1\0\1\234\1\227"+
    "\1\0\2\234\6\0\4\234\1\230\1\234\1\226\1\234"+
    "\3\0\1\234\1\0\1\234\2\0\1\234\4\0\1\234"+
    "\1\0\1\234\23\0\7\234\1\0\2\234\21\0\1\235"+
    "\3\0\1\230\20\0\1\235\35\0\2\235\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9170];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\11\1\1\11\1\1\1\0\25\1\1\11"+
    "\7\1\3\11\5\1\4\0\1\1\4\0\1\1\1\0"+
    "\1\1\1\11\3\0\2\1\3\0\1\1\1\0\1\1"+
    "\1\0\1\1\2\0\4\1\1\0\2\1\2\0\1\11"+
    "\2\0\1\1\1\0\2\1\1\0\1\1\1\0\1\1"+
    "\2\0\2\1\1\0\1\1\1\0\1\1\7\0\5\1"+
    "\1\0\10\1\3\0\1\11\1\1\4\0\1\1\1\11"+
    "\1\1\1\0\1\1\4\0\1\1\1\0\1\1\2\0"+
    "\1\1\2\0\3\1\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[159];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public ArrayList<Token> readSentence() throws IOException {
    ArrayList<Token> sentence = new ArrayList<Token>();
    Token token, lastNonSpace = null, lastSpace = null;

    while((token = yylex()) != null) {
        if(token.isSpace()) {
            if(token.type == Token.TOK_NEWLINES) {
                if(!sentence.isEmpty()) return sentence;
            }
            lastSpace = token;
        } else {
            if(!sentence.isEmpty()) {
                if(lastNonSpace != null &&
                   lastNonSpace.value.endsWith(".") &&
                   lastNonSpace.value.length() > 1 &&
                   token.isCapitalized())
                {
                    yypushback(yylength());
                    return sentence;
                } else if(token.type == Token.TOK_SENT_FINAL) {
                    if(lastNonSpace != null &&
                       lastNonSpace.value.length() == 1 &&
                       lastNonSpace.isCapitalized())
                    {
                    } else {
                        sentence.add(token);
                        return sentence;
                    }
                }
            }
            // I admit this is not pretty.
            if(token.type == Token.TOK_LATIN) {
                String textLower = token.value.toLowerCase();
                int length = token.value.length();
                if(textLower.endsWith("n't")) {
                    if(textLower.equals("can't")) {
                        sentence.add(new Token(
                            Token.TOK_LATIN, token.value.substring(0,3),
                            token.offset));
                        sentence.add(new Token(
                            Token.TOK_LATIN, token.value.substring(2),
                            token.offset+2));
                    } else {
                        sentence.add(new Token(
                            Token.TOK_LATIN,
                            token.value.substring(0,length-3),
                            token.offset));
                        sentence.add(new Token(
                            Token.TOK_LATIN,
                            token.value.substring(length-3),
                            token.offset+length-3));
                    }
                } else {
                    sentence.add(token);
                }
            } else {
                sentence.add(token);
            }
            lastNonSpace = token;
        }
    }
    if(sentence.isEmpty()) return null;
    return sentence;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public EnglishTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 540) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return(new Token(Token.TOK_UNKNOWN,yytext(),yychar));
            } 
            // fall through
          case 21: break;
          case 2: 
            { return(new Token(Token.TOK_SYMBOL,yytext(),yychar));
            } 
            // fall through
          case 22: break;
          case 3: 
            { return(new Token(Token.TOK_LATIN,yytext(),yychar));
            } 
            // fall through
          case 23: break;
          case 4: 
            { return(new Token(Token.TOK_SPACE,yytext(),yychar));
            } 
            // fall through
          case 24: break;
          case 5: 
            { return(new Token(Token.TOK_NEWLINE,yytext(),yychar));
            } 
            // fall through
          case 25: break;
          case 6: 
            { return(new Token(Token.TOK_NUMBER,yytext(),yychar));
            } 
            // fall through
          case 26: break;
          case 7: 
            { return(new Token(Token.TOK_SENT_FINAL,yytext(),yychar));
            } 
            // fall through
          case 27: break;
          case 8: 
            { return(new Token(Token.TOK_DASH,yytext(),yychar));
            } 
            // fall through
          case 28: break;
          case 9: 
            { return(new Token(Token.TOK_GREEK,yytext(),yychar));
            } 
            // fall through
          case 29: break;
          case 10: 
            { return(new Token(Token.TOK_ARABIC,yytext(),yychar));
            } 
            // fall through
          case 30: break;
          case 11: 
            { return(new Token(Token.TOK_NAGARI,yytext(),yychar));
            } 
            // fall through
          case 31: break;
          case 12: 
            { return(new Token(Token.TOK_KANA,yytext(),yychar));
            } 
            // fall through
          case 32: break;
          case 13: 
            { return(new Token(Token.TOK_HANGUL,yytext(),yychar));
            } 
            // fall through
          case 33: break;
          case 14: 
            { return(new Token(Token.TOK_HANZI,yytext(),yychar));
            } 
            // fall through
          case 34: break;
          case 15: 
            { return(new Token(Token.TOK_SMILEY,yytext(),yychar));
            } 
            // fall through
          case 35: break;
          case 16: 
            { return(new Token(Token.TOK_SPACES,yytext(),yychar));
            } 
            // fall through
          case 36: break;
          case 17: 
            { return(new Token(Token.TOK_NEWLINES,yytext(),yychar));
            } 
            // fall through
          case 37: break;
          case 18: 
            { return(new Token(Token.TOK_URL,yytext(),yychar));
            } 
            // fall through
          case 38: break;
          case 19: 
            { return(new Token(Token.TOK_EMAIL,yytext(),yychar));
            } 
            // fall through
          case 39: break;
          case 20: 
            { sentID = yytext().substring(6, yylength()-1);
            } 
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
