/* The following code was generated by JFlex 1.7.0 */

package se.su.ling.stagger;
import java.util.*;
import java.io.*;


/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.7.0
 * from the specification file <tt>/Users/ikwattro/dev/stagger/src/SwedishTokenizer.flex</tt>
 */
public class SwedishTokenizer extends Tokenizer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED = 
    "\11\0\1\13\1\15\1\113\1\113\1\14\22\0\1\103\1\52\1\55"+
    "\1\30\1\37\1\31\1\30\1\36\1\46\1\42\1\55\1\31\1\51"+
    "\1\27\1\26\1\24\1\20\2\112\1\45\6\20\1\6\1\34\1\44"+
    "\1\41\1\50\1\53\1\32\1\102\1\105\1\76\1\5\1\73\1\23"+
    "\1\101\1\21\1\11\1\33\1\110\1\106\1\77\1\74\1\40\1\22"+
    "\1\33\1\100\1\10\1\3\1\75\1\111\1\25\1\104\1\47\1\33"+
    "\1\1\1\30\1\12\1\43\1\7\1\55\1\102\1\105\1\76\1\5"+
    "\1\73\1\23\1\101\1\21\1\11\1\33\1\110\1\106\1\77\1\74"+
    "\1\40\1\22\1\33\1\100\1\10\1\3\1\75\1\111\1\25\1\35"+
    "\1\47\1\33\3\55\1\30\6\0\1\16\32\0\1\13\37\55\27\60"+
    "\1\55\37\60\1\55\70\60\2\4\115\60\1\2\u01f0\0\220\61\u0200\0"+
    "\140\62\12\63\206\62\12\63\6\62\120\0\60\62\100\0\12\17\u0136\0"+
    "\146\64\12\65\20\64\146\0\12\17\166\0\12\17\166\0\12\17\166\0"+
    "\12\17\166\0\12\17\166\0\12\17\166\0\12\17\166\0\12\17\166\0"+
    "\12\17\140\0\12\17\166\0\12\17\106\0\12\17\u0116\0\12\17\106\0"+
    "\12\17\146\0\u0100\67\u05e0\0\12\17\46\0\12\17\u012c\0\12\17\200\0"+
    "\12\17\246\0\12\17\6\0\12\17\266\0\12\17\126\0\12\17\206\0"+
    "\12\17\6\0\12\17\166\0\60\64\u0200\0\u0100\61\16\13\2\0\6\54"+
    "\22\55\1\57\1\57\33\55\345\0\1\107\u0ed5\0\1\56\37\55\40\0"+
    "\300\66\60\0\140\67\u0270\0\u19c0\70\100\0\u5200\70\u0620\0\12\17\u02a6\0"+
    "\12\17\6\0\40\64\12\17\126\0\40\67\120\0\12\17\26\0\12\17"+
    "\126\0\12\17\u0196\0\12\17\u2bb6\0\120\67\100\72\60\71\u0790\72\u1b50\0"+
    "\u02b0\62\160\0\220\62\20\0\12\17\113\0\73\66\u0500\0\12\17\u0bbc\0"+
    "\12\17\200\0\12\17\74\0\12\17\220\0\12\17\u0116\0\12\17\u0156\0"+
    "\12\17\166\0\12\17\u0176\0\12\17\146\0\12\17\146\0\12\17\u01a6\0"+
    "\12\17\u0366\0\12\17\u4e06\0\12\17\346\0\12\17\u6c74\0\62\17\u1150\0"+
    "\12\17\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\u16b5\0";

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\3\3\2\2\2\3\1\2\1\4"+
    "\1\0\1\5\2\6\2\3\1\2\1\3\1\7\1\10"+
    "\1\2\1\3\1\2\1\3\6\2\1\7\1\10\2\2"+
    "\1\11\1\12\1\6\1\13\1\6\1\14\1\15\1\16"+
    "\1\1\4\3\1\6\2\0\1\3\2\0\1\3\1\0"+
    "\1\3\1\0\2\3\1\0\1\17\1\0\1\3\1\17"+
    "\2\0\1\17\1\2\1\0\1\20\1\0\1\21\3\0"+
    "\1\6\2\3\1\0\1\3\2\0\2\3\1\6\1\0"+
    "\1\2\1\0\1\17\1\3\2\0\1\3\1\0\1\3"+
    "\2\0\1\17\1\0\1\17\1\2\1\0\1\17\1\0"+
    "\3\3\2\0\1\3\2\0\1\3\1\0\2\3\14\0"+
    "\3\6\1\3\3\0\2\3\1\17\2\0\1\3\1\17"+
    "\4\0\1\17\1\3\4\0\1\6\1\0\1\3\2\22"+
    "\1\0\1\3\5\0\1\3\1\0\1\3\4\0\1\3"+
    "\2\0\1\22\1\0\1\23\2\0\1\22\2\0\1\23"+
    "\2\22\1\24\1\23";

  private static int [] zzUnpackAction() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\114\0\230\0\344\0\u0130\0\u017c\0\u01c8\0\u0214"+
    "\0\u0260\0\u02ac\0\114\0\u02f8\0\u0344\0\u0390\0\u03dc\0\u0428"+
    "\0\u0474\0\u04c0\0\u050c\0\u0558\0\u05a4\0\u05f0\0\u063c\0\u0688"+
    "\0\u06d4\0\u0720\0\u076c\0\u07b8\0\u0804\0\u0850\0\u089c\0\u08e8"+
    "\0\u0934\0\114\0\u02f8\0\u0390\0\u0980\0\u09cc\0\u0a18\0\u0a64"+
    "\0\u0ab0\0\114\0\114\0\114\0\u0afc\0\u0b48\0\u0b94\0\u0be0"+
    "\0\u0c2c\0\u0c78\0\u0cc4\0\u0d10\0\u0d5c\0\u0da8\0\u0214\0\u0df4"+
    "\0\u0e40\0\u0e8c\0\u0ed8\0\u0f24\0\u0f70\0\u0fbc\0\u0d10\0\u1008"+
    "\0\u1054\0\114\0\u06d4\0\u07b8\0\u10a0\0\u10a0\0\u10ec\0\u02f8"+
    "\0\u1138\0\u1184\0\u11d0\0\u121c\0\u1268\0\u0df4\0\u12b4\0\u1300"+
    "\0\u134c\0\u1398\0\u13e4\0\u1430\0\u147c\0\u14c8\0\u1514\0\u1560"+
    "\0\u15ac\0\u10a0\0\u15f8\0\u1644\0\u1690\0\u16dc\0\u1728\0\u1774"+
    "\0\u17c0\0\u180c\0\u1858\0\u076c\0\u18a4\0\u0804\0\u18f0\0\u193c"+
    "\0\u1988\0\u19d4\0\u1a20\0\u1a6c\0\u1ab8\0\u1b04\0\u1b50\0\u1b9c"+
    "\0\u1be8\0\u1c34\0\114\0\u1c80\0\u0da8\0\u1ccc\0\u1d18\0\u1d64"+
    "\0\u1db0\0\u1dfc\0\u1e48\0\u1e94\0\u1ee0\0\u1f2c\0\u1f78\0\u1fc4"+
    "\0\u2010\0\u205c\0\u11d0\0\u1c80\0\u1268\0\u20a8\0\u20f4\0\u2140"+
    "\0\u218c\0\u21d8\0\u2224\0\u2270\0\u22bc\0\u2308\0\u2354\0\u0214"+
    "\0\u23a0\0\u23ec\0\u2438\0\u2484\0\u24d0\0\u1008\0\u251c\0\u2568"+
    "\0\u25b4\0\u2600\0\u1ccc\0\u264c\0\u2698\0\114\0\u0214\0\u26e4"+
    "\0\u2730\0\u277c\0\u27c8\0\u2814\0\u2860\0\u28ac\0\u28f8\0\u2944"+
    "\0\u2990\0\u29dc\0\u2a28\0\u2a74\0\u2ac0\0\u0214\0\u2b0c\0\u2b58"+
    "\0\u2ba4\0\u2bf0\0\u2c3c\0\u2c88\0\u2cd4\0\u2d20\0\u2d6c\0\u2db8"+
    "\0\u2e04\0\u2e50\0\u2e9c\0\114\0\u1ee0";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\4\1\6\1\7\1\10"+
    "\1\11\1\12\1\13\1\14\1\15\2\16\1\17\1\20"+
    "\1\21\1\6\1\22\1\23\1\24\1\25\1\26\1\13"+
    "\1\10\1\13\1\12\1\27\1\30\1\13\1\31\1\32"+
    "\1\33\1\34\1\35\1\36\1\20\1\37\1\12\1\13"+
    "\1\40\2\41\1\42\1\13\1\43\1\44\1\4\1\45"+
    "\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55"+
    "\1\2\1\56\2\12\1\57\1\60\3\12\1\14\1\12"+
    "\1\61\1\12\1\2\2\12\1\62\117\0\1\63\5\0"+
    "\1\63\105\0\4\4\1\64\1\0\2\4\6\0\4\4"+
    "\1\0\1\4\1\0\1\65\3\0\1\4\1\0\1\4"+
    "\1\66\1\0\1\4\4\0\1\4\1\0\1\4\10\0"+
    "\1\4\12\0\10\4\1\0\3\4\1\0\3\4\3\0"+
    "\1\4\1\12\1\4\1\12\1\64\1\67\2\12\6\0"+
    "\1\70\3\12\1\0\1\12\1\71\1\72\1\0\1\67"+
    "\1\73\1\12\1\0\1\12\1\66\1\0\1\74\4\0"+
    "\1\70\1\0\1\12\10\0\1\4\12\0\1\75\7\12"+
    "\1\76\3\12\1\0\2\12\1\70\3\0\1\4\1\12"+
    "\1\4\1\6\1\77\1\67\1\11\1\12\6\0\1\70"+
    "\1\12\1\6\1\12\1\0\1\12\1\100\1\101\1\0"+
    "\1\67\1\73\1\12\1\102\1\12\1\66\1\103\1\12"+
    "\1\102\1\104\2\0\1\70\1\104\1\12\10\0\1\4"+
    "\12\0\10\12\1\0\3\12\1\0\2\12\1\70\6\0"+
    "\1\105\2\0\1\105\11\0\1\105\4\0\1\106\6\0"+
    "\1\107\1\105\1\102\1\0\1\105\3\0\1\105\50\0"+
    "\1\67\1\0\1\67\1\0\3\67\6\0\4\67\1\0"+
    "\3\67\1\0\1\67\1\73\1\67\1\0\1\67\2\0"+
    "\1\67\4\0\1\67\1\0\1\67\23\0\10\67\1\0"+
    "\3\67\1\0\3\67\3\0\1\4\1\12\1\4\1\11"+
    "\1\77\1\67\1\11\1\12\6\0\1\70\1\12\1\11"+
    "\1\12\1\0\1\12\1\100\1\101\1\0\1\67\1\73"+
    "\1\12\1\102\1\12\1\66\1\103\1\12\1\0\1\103"+
    "\2\0\1\70\1\103\1\12\10\0\1\4\12\0\10\12"+
    "\1\0\3\12\1\0\2\12\1\70\3\0\1\4\1\12"+
    "\1\4\1\12\1\64\1\67\2\12\6\0\1\70\3\12"+
    "\1\0\1\12\1\100\1\72\1\0\1\67\1\73\1\12"+
    "\1\0\1\12\1\66\1\0\1\12\4\0\1\70\1\0"+
    "\1\12\10\0\1\4\12\0\10\12\1\0\3\12\1\0"+
    "\2\12\1\70\14\0\1\110\1\15\2\16\37\0\1\110"+
    "\1\16\23\0\1\110\25\0\1\16\111\0\1\16\1\111"+
    "\2\112\37\0\1\16\1\112\23\0\1\16\27\0\2\17"+
    "\5\0\1\113\16\0\1\17\3\0\1\113\11\0\1\17"+
    "\1\0\1\17\24\0\1\17\3\0\1\4\1\70\1\4"+
    "\1\70\1\114\1\67\2\70\5\0\1\17\1\20\3\70"+
    "\1\0\1\70\1\115\1\72\1\0\1\67\1\73\1\70"+
    "\1\0\1\70\1\66\1\0\1\70\4\0\1\20\1\0"+
    "\1\70\1\0\1\113\6\0\1\4\2\0\1\17\1\0"+
    "\1\17\5\0\1\116\7\70\1\0\3\70\1\0\2\70"+
    "\1\62\3\0\1\4\1\117\1\4\1\12\1\64\1\67"+
    "\2\12\6\0\1\70\3\12\1\0\1\12\1\100\1\72"+
    "\1\0\1\67\1\73\1\12\1\0\1\12\1\66\1\0"+
    "\1\12\4\0\1\70\1\0\1\12\10\0\1\4\12\0"+
    "\10\12\1\0\3\12\1\0\2\12\1\70\3\0\1\4"+
    "\1\120\1\4\1\12\1\64\1\67\2\12\6\0\1\70"+
    "\3\12\1\0\1\12\1\121\1\72\1\0\1\67\1\73"+
    "\1\12\1\0\1\12\1\66\1\0\1\12\4\0\1\70"+
    "\1\0\1\12\10\0\1\4\12\0\5\12\1\122\2\12"+
    "\1\123\3\12\1\124\1\125\1\12\1\70\25\0\1\23"+
    "\71\0\1\4\1\12\1\4\1\12\1\64\1\67\2\12"+
    "\6\0\1\70\3\12\1\0\1\126\1\100\1\72\1\0"+
    "\1\67\1\73\1\12\1\0\1\12\1\66\1\0\1\12"+
    "\4\0\1\70\1\0\1\12\10\0\1\4\12\0\10\12"+
    "\1\0\3\12\1\0\2\12\1\70\4\0\1\67\1\0"+
    "\1\67\1\0\3\67\6\0\4\67\1\0\1\67\1\25"+
    "\1\67\1\0\1\67\1\73\1\67\1\0\1\67\2\0"+
    "\1\67\4\0\1\67\1\0\1\67\2\0\2\41\17\0"+
    "\10\67\1\0\3\67\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\3\67\5\0\1\17\1\127\3\67\1\0"+
    "\2\67\1\130\1\0\1\67\1\73\1\67\1\0\1\67"+
    "\2\0\1\67\4\0\1\127\1\0\1\67\1\131\12\0"+
    "\1\17\1\0\1\17\5\0\10\67\1\0\3\67\1\0"+
    "\2\67\1\127\6\0\1\105\2\0\1\105\11\0\1\105"+
    "\4\0\1\132\6\0\1\107\1\105\1\102\1\0\1\105"+
    "\3\0\1\105\47\0\1\4\1\12\1\4\1\133\1\64"+
    "\1\67\1\133\1\12\6\0\1\70\1\12\1\133\1\12"+
    "\1\0\1\12\1\100\1\134\1\0\1\67\1\73\1\12"+
    "\1\0\1\12\1\135\1\105\1\12\1\0\1\105\2\0"+
    "\1\70\1\105\1\12\10\0\1\4\12\0\10\12\1\0"+
    "\3\12\1\0\2\12\1\70\6\0\1\103\1\102\1\0"+
    "\1\103\11\0\1\103\4\0\1\136\4\0\1\102\2\0"+
    "\1\103\2\0\1\103\3\0\1\103\47\0\1\137\1\12"+
    "\1\4\1\12\1\64\1\140\1\141\1\12\6\0\1\70"+
    "\3\12\1\0\1\12\1\142\1\72\1\0\1\67\1\73"+
    "\1\12\1\0\1\12\1\66\1\0\1\12\4\0\1\70"+
    "\1\0\1\12\10\0\1\4\12\0\10\12\1\143\3\12"+
    "\1\0\2\12\1\70\6\0\1\144\14\0\1\144\17\0"+
    "\1\144\3\0\1\144\52\0\1\104\1\102\1\0\1\103"+
    "\11\0\1\104\4\0\1\136\4\0\1\102\2\0\1\103"+
    "\1\0\1\102\1\104\3\0\1\104\54\0\1\145\33\0"+
    "\1\146\77\0\1\147\14\0\1\150\1\151\53\0\1\104"+
    "\1\102\1\0\1\103\11\0\1\104\4\0\1\136\4\0"+
    "\1\102\2\0\1\103\1\0\1\102\1\104\3\0\1\104"+
    "\1\152\115\0\1\40\114\0\2\41\121\0\1\45\114\0"+
    "\2\46\47\0\2\17\5\0\1\113\16\0\1\17\3\0"+
    "\1\113\10\0\1\46\1\47\1\0\1\17\24\0\1\17"+
    "\65\0\2\50\45\0\2\17\5\0\1\113\16\0\1\17"+
    "\3\0\1\113\11\0\1\17\1\50\1\51\24\0\1\17"+
    "\72\0\2\54\23\0\1\4\1\153\1\4\1\12\1\64"+
    "\1\67\2\12\6\0\1\70\3\12\1\0\1\12\1\121"+
    "\1\72\1\0\1\67\1\73\1\12\1\0\1\12\1\66"+
    "\1\0\1\12\4\0\1\70\1\0\1\12\10\0\1\4"+
    "\12\0\10\12\1\123\3\12\1\124\1\125\1\12\1\70"+
    "\3\0\1\4\1\12\1\4\1\12\1\64\1\67\2\12"+
    "\6\0\1\70\3\12\1\0\1\12\1\100\1\72\1\0"+
    "\1\67\1\73\1\12\1\0\1\12\1\66\1\0\1\12"+
    "\4\0\1\70\1\0\1\12\10\0\1\4\12\0\7\12"+
    "\1\154\1\0\3\12\1\0\2\12\1\70\3\0\1\4"+
    "\1\12\1\4\1\12\1\64\1\67\2\12\6\0\1\70"+
    "\2\12\1\155\1\0\1\12\1\156\1\72\1\0\1\67"+
    "\1\73\1\12\1\0\1\12\1\66\1\0\1\12\4\0"+
    "\1\70\1\0\1\12\10\0\1\4\12\0\10\12\1\157"+
    "\3\12\1\0\2\12\1\70\3\0\1\4\1\12\1\4"+
    "\1\12\1\64\1\67\2\12\6\0\1\70\3\12\1\0"+
    "\1\12\1\100\1\72\1\0\1\67\1\73\1\12\1\0"+
    "\1\12\1\66\1\0\1\12\4\0\1\70\1\0\1\12"+
    "\10\0\1\4\12\0\10\12\1\0\2\12\1\160\1\0"+
    "\2\12\1\70\3\0\1\4\1\70\1\4\1\70\1\161"+
    "\1\67\2\70\5\0\1\17\1\20\3\70\1\0\1\70"+
    "\1\115\1\72\1\0\1\67\1\73\1\70\1\0\1\70"+
    "\1\66\1\0\1\70\4\0\1\20\1\0\1\70\1\0"+
    "\1\113\6\0\1\4\2\0\1\17\1\0\1\17\5\0"+
    "\1\116\6\70\1\116\1\0\3\70\1\0\2\70\1\62"+
    "\4\0\1\162\112\0\1\163\5\0\1\163\62\0\1\164"+
    "\1\165\5\0\1\166\13\0\4\4\2\0\2\4\6\0"+
    "\4\4\1\0\1\4\5\0\1\4\1\0\1\4\2\0"+
    "\1\4\4\0\1\4\1\0\1\4\10\0\1\4\12\0"+
    "\10\4\1\0\3\4\1\0\3\4\3\0\1\163\5\0"+
    "\1\163\105\0\1\4\1\70\1\4\1\70\1\64\1\67"+
    "\2\70\6\0\4\70\1\0\1\70\1\67\1\72\1\0"+
    "\1\67\1\73\1\70\1\0\1\70\1\66\1\0\1\70"+
    "\4\0\1\70\1\0\1\70\10\0\1\4\12\0\10\70"+
    "\1\0\3\70\1\0\3\70\3\0\1\167\1\67\1\0"+
    "\1\67\1\0\1\67\1\170\1\67\6\0\4\67\1\0"+
    "\3\67\1\0\1\67\1\73\1\67\1\0\1\67\2\0"+
    "\1\171\4\0\1\67\1\0\1\67\23\0\1\172\1\173"+
    "\1\67\1\174\4\67\1\76\3\67\1\0\3\67\3\0"+
    "\1\4\1\70\1\4\1\70\1\0\1\67\2\70\6\0"+
    "\4\70\1\0\1\70\2\67\1\0\1\67\1\73\1\70"+
    "\1\0\1\70\2\0\1\70\4\0\1\70\1\0\1\70"+
    "\10\0\1\4\12\0\10\70\1\0\3\70\1\0\3\70"+
    "\4\0\1\175\1\0\1\175\2\0\2\175\6\0\4\175"+
    "\1\0\3\175\3\0\1\175\1\0\1\175\2\0\1\175"+
    "\4\0\1\175\1\0\1\175\23\0\10\175\1\0\3\175"+
    "\1\0\3\175\3\0\1\4\1\12\1\4\1\12\1\64"+
    "\1\67\2\12\6\0\1\70\3\12\1\0\1\12\1\176"+
    "\1\72\1\0\1\67\1\73\1\12\1\0\1\12\1\66"+
    "\1\0\1\12\4\0\1\70\1\0\1\12\10\0\1\4"+
    "\12\0\4\12\1\154\3\12\1\177\3\12\1\0\2\12"+
    "\1\70\3\0\1\4\1\12\1\4\1\12\1\64\1\67"+
    "\2\12\6\0\1\70\3\12\1\0\1\12\1\100\1\72"+
    "\1\0\1\67\1\73\1\12\1\0\1\154\1\66\1\0"+
    "\1\12\4\0\1\70\1\0\1\12\10\0\1\4\12\0"+
    "\10\12\1\0\1\154\2\12\1\0\2\12\1\70\41\0"+
    "\1\200\32\0\1\201\22\0\1\167\1\67\1\0\1\67"+
    "\1\0\1\67\1\170\1\67\6\0\4\67\1\0\3\67"+
    "\1\0\1\67\1\73\1\67\1\0\1\67\2\0\1\202"+
    "\4\0\1\67\1\0\1\67\23\0\1\67\1\173\1\67"+
    "\1\174\4\67\1\0\3\67\1\0\3\67\3\0\1\4"+
    "\1\70\1\4\1\70\1\102\1\67\2\70\6\0\4\70"+
    "\1\0\1\70\2\67\1\0\1\67\1\73\1\70\1\102"+
    "\1\70\2\0\1\70\4\0\1\70\1\0\1\70\10\0"+
    "\1\4\12\0\10\70\1\0\3\70\1\0\3\70\6\0"+
    "\1\105\2\0\1\105\11\0\1\105\14\0\1\105\2\0"+
    "\1\105\3\0\1\105\52\0\1\105\2\0\1\105\11\0"+
    "\1\105\4\0\1\132\7\0\1\105\2\0\1\105\3\0"+
    "\1\105\62\0\1\112\111\0\1\112\1\111\2\112\37\0"+
    "\2\112\23\0\1\112\27\0\2\203\24\0\1\203\15\0"+
    "\1\203\1\0\1\203\24\0\1\203\3\0\1\163\5\0"+
    "\1\163\62\0\1\204\1\165\5\0\1\166\14\0\1\67"+
    "\1\0\1\67\1\0\3\67\5\0\1\203\1\205\3\67"+
    "\1\0\3\67\1\0\1\67\1\73\1\67\1\0\1\67"+
    "\2\0\1\67\4\0\1\205\1\0\1\67\13\0\1\203"+
    "\1\0\1\203\5\0\10\67\1\0\3\67\1\0\2\67"+
    "\1\205\3\0\1\4\1\120\1\4\1\12\1\64\1\67"+
    "\2\12\6\0\1\70\3\12\1\0\1\12\1\100\1\72"+
    "\1\0\1\67\1\73\1\12\1\0\1\12\1\66\1\0"+
    "\1\12\4\0\1\70\1\0\1\12\10\0\1\4\12\0"+
    "\10\12\1\0\3\12\1\0\2\12\1\70\3\0\1\4"+
    "\1\12\1\4\1\12\1\64\1\67\2\12\6\0\1\70"+
    "\1\12\1\206\1\12\1\0\1\12\1\100\1\72\1\0"+
    "\1\67\1\73\1\12\1\0\1\12\1\66\1\0\1\12"+
    "\4\0\1\70\1\0\1\12\10\0\1\4\12\0\10\12"+
    "\1\0\3\12\1\0\2\12\1\70\3\0\1\167\1\67"+
    "\1\0\1\67\1\0\1\67\1\170\1\67\6\0\4\67"+
    "\1\0\3\67\1\0\1\67\1\73\1\67\1\0\1\67"+
    "\2\0\1\202\4\0\1\67\1\0\1\67\23\0\1\67"+
    "\1\173\1\67\1\174\4\67\1\123\3\67\1\124\1\207"+
    "\2\67\3\0\1\4\1\12\1\4\1\12\1\64\1\67"+
    "\2\12\6\0\1\70\3\12\1\0\1\12\1\210\1\72"+
    "\1\0\1\67\1\73\1\12\1\0\1\12\1\66\1\0"+
    "\1\74\4\0\1\70\1\0\1\12\10\0\1\4\12\0"+
    "\10\12\1\211\3\12\1\0\2\12\1\70\110\0\2\124"+
    "\103\0\1\212\15\0\1\4\1\12\1\4\1\12\1\64"+
    "\1\67\2\12\6\0\1\70\3\12\1\0\1\12\1\100"+
    "\1\72\1\0\1\67\1\73\1\12\1\0\1\12\1\66"+
    "\1\0\1\12\4\0\1\70\1\0\1\12\10\0\1\4"+
    "\12\0\5\12\1\154\2\12\1\0\3\12\1\0\2\12"+
    "\1\70\3\0\1\4\1\12\1\4\1\12\1\64\1\67"+
    "\2\12\6\0\1\70\3\12\1\0\1\213\1\100\1\72"+
    "\1\0\1\67\1\73\1\12\1\0\1\12\1\66\1\0"+
    "\1\12\4\0\1\70\1\0\1\12\10\0\1\4\12\0"+
    "\10\12\1\0\3\12\1\0\2\12\1\70\4\0\1\67"+
    "\1\0\1\67\1\0\3\67\5\0\1\17\1\127\3\67"+
    "\1\0\1\67\1\115\1\67\1\0\1\67\1\73\1\67"+
    "\1\0\1\67\2\0\1\67\4\0\1\127\1\0\1\67"+
    "\1\0\1\113\11\0\1\17\1\0\1\17\5\0\10\67"+
    "\1\0\3\67\1\0\2\67\1\127\4\0\1\67\1\0"+
    "\1\67\1\0\3\67\6\0\4\67\1\0\2\67\1\130"+
    "\1\0\1\67\1\73\1\67\1\0\1\67\2\0\1\67"+
    "\4\0\1\67\1\0\1\67\1\131\22\0\10\67\1\0"+
    "\3\67\1\0\3\67\51\0\1\131\45\0\1\4\1\12"+
    "\1\4\1\133\1\64\1\67\1\133\1\12\6\0\1\70"+
    "\1\12\1\133\1\12\1\0\1\12\1\100\1\72\1\0"+
    "\1\67\1\73\1\12\1\0\1\12\1\66\1\105\1\12"+
    "\1\0\1\105\2\0\1\70\1\105\1\12\10\0\1\4"+
    "\12\0\10\12\1\0\3\12\1\0\2\12\1\70\3\0"+
    "\1\4\1\70\1\4\1\214\1\0\1\67\1\214\1\70"+
    "\6\0\2\70\1\214\1\70\1\0\1\70\2\67\1\0"+
    "\1\67\1\73\1\70\1\0\1\70\1\0\1\105\1\70"+
    "\1\0\1\105\2\0\1\70\1\105\1\70\10\0\1\4"+
    "\12\0\10\70\1\0\3\70\1\0\3\70\3\0\1\163"+
    "\2\0\1\105\2\0\1\105\11\0\1\105\4\0\1\132"+
    "\7\0\1\105\2\0\1\105\3\0\1\105\53\0\1\102"+
    "\25\0\1\102\61\0\4\4\1\64\1\0\2\4\6\0"+
    "\4\4\1\0\1\4\1\215\1\65\3\0\1\4\1\0"+
    "\1\4\1\66\1\0\1\4\4\0\1\4\1\0\1\4"+
    "\10\0\1\4\12\0\10\4\1\216\3\4\1\0\1\4"+
    "\1\217\1\4\4\0\1\67\1\0\1\67\1\0\3\67"+
    "\6\0\4\67\1\0\3\67\1\0\1\67\1\73\1\67"+
    "\1\0\1\67\2\0\1\220\4\0\1\67\1\0\1\67"+
    "\23\0\10\67\1\0\3\67\1\0\3\67\3\0\1\4"+
    "\1\12\1\4\1\12\1\64\1\67\2\12\6\0\1\70"+
    "\3\12\1\0\1\12\1\221\1\72\1\0\1\67\1\73"+
    "\1\12\1\0\1\12\1\66\1\0\1\12\4\0\1\70"+
    "\1\0\1\12\10\0\1\4\12\0\10\12\1\216\3\12"+
    "\1\0\1\12\1\154\1\70\3\0\1\222\1\67\1\0"+
    "\1\67\1\0\1\67\1\223\1\67\6\0\4\67\1\0"+
    "\3\67\1\0\1\67\1\73\1\67\1\0\1\67\2\0"+
    "\1\202\4\0\1\67\1\0\1\67\23\0\1\67\1\173"+
    "\1\67\1\174\4\67\1\143\3\67\1\0\3\67\3\0"+
    "\1\224\5\0\1\224\112\0\1\145\33\0\1\225\77\0"+
    "\1\147\113\0\1\147\14\0\1\150\114\0\1\151\110\0"+
    "\1\102\53\0\1\4\1\12\1\4\1\12\1\64\1\67"+
    "\2\12\6\0\1\70\3\12\1\0\1\12\1\100\1\72"+
    "\1\0\1\67\1\73\1\12\1\0\1\12\1\66\1\0"+
    "\1\12\4\0\1\70\1\0\1\12\10\0\1\4\12\0"+
    "\3\12\1\154\4\12\1\0\3\12\1\0\2\12\1\70"+
    "\3\0\1\4\1\12\1\4\1\12\1\64\1\67\2\12"+
    "\6\0\1\70\3\12\1\0\1\12\1\226\1\72\1\0"+
    "\1\67\1\73\1\12\1\0\1\12\1\66\1\0\1\12"+
    "\4\0\1\70\1\0\1\12\10\0\1\4\12\0\10\12"+
    "\1\0\3\12\1\0\2\12\1\70\3\0\1\4\1\12"+
    "\1\4\1\12\1\64\1\67\2\12\6\0\1\70\3\12"+
    "\1\0\1\12\1\100\1\72\1\0\1\67\1\73\1\12"+
    "\1\0\1\12\1\66\1\0\1\12\4\0\1\70\1\0"+
    "\1\12\10\0\1\4\12\0\10\12\1\0\2\12\1\154"+
    "\1\0\2\12\1\70\3\0\1\167\1\67\1\0\1\67"+
    "\1\0\1\67\1\170\1\67\6\0\3\67\1\227\1\0"+
    "\3\67\1\0\1\67\1\73\1\67\1\0\1\67\2\0"+
    "\1\202\4\0\1\67\1\0\1\67\23\0\1\67\1\173"+
    "\1\67\1\174\4\67\1\157\3\67\1\0\3\67\24\0"+
    "\1\230\72\0\1\4\1\12\1\4\1\12\1\64\1\67"+
    "\2\12\6\0\1\70\3\12\1\0\1\12\1\231\1\72"+
    "\1\0\1\67\1\73\1\12\1\0\1\12\1\66\1\0"+
    "\1\12\4\0\1\70\1\0\1\12\10\0\1\4\12\0"+
    "\7\12\1\154\1\232\3\12\1\0\2\12\1\70\3\0"+
    "\1\163\5\0\1\163\62\0\1\204\1\165\5\0\1\233"+
    "\15\0\1\234\4\0\1\234\176\0\1\165\117\0\1\235"+
    "\106\0\1\236\23\0\1\67\1\0\1\67\1\0\3\67"+
    "\6\0\4\67\1\0\3\67\1\0\1\67\1\73\1\67"+
    "\1\0\1\67\2\0\1\67\4\0\1\67\1\0\1\67"+
    "\23\0\1\237\7\67\1\0\3\67\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\3\67\6\0\4\67\1\0"+
    "\1\67\1\240\1\67\1\0\1\67\1\73\1\67\1\0"+
    "\1\67\2\0\1\67\4\0\1\67\1\0\1\67\23\0"+
    "\4\67\1\241\1\242\2\67\1\177\3\67\1\0\3\67"+
    "\4\0\1\67\1\0\1\67\1\0\3\67\6\0\4\67"+
    "\1\0\3\67\1\0\1\67\1\73\1\67\1\0\1\241"+
    "\2\0\1\67\4\0\1\67\1\0\1\67\23\0\10\67"+
    "\1\0\1\241\2\67\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\3\67\6\0\4\67\1\0\3\67\1\0"+
    "\1\67\1\73\1\67\1\0\1\67\2\0\1\67\4\0"+
    "\1\67\1\0\1\67\23\0\1\243\1\67\1\237\5\67"+
    "\1\0\3\67\1\0\3\67\4\0\1\67\1\0\1\67"+
    "\1\0\3\67\6\0\4\67\1\0\3\67\1\0\1\67"+
    "\1\73\1\67\1\0\1\67\2\0\1\244\4\0\1\67"+
    "\1\0\1\67\23\0\10\67\1\0\3\67\1\0\3\67"+
    "\4\0\1\175\1\0\1\175\2\0\2\175\6\0\4\175"+
    "\1\0\1\175\1\245\1\175\3\0\1\175\1\0\1\175"+
    "\2\0\1\175\4\0\1\175\1\0\1\175\23\0\10\175"+
    "\1\0\3\175\1\0\3\175\3\0\1\167\1\67\1\0"+
    "\1\67\1\0\1\67\1\170\1\67\6\0\4\67\1\0"+
    "\3\67\1\0\1\67\1\73\1\67\1\0\1\67\2\0"+
    "\1\202\4\0\1\67\1\0\1\67\23\0\1\67\1\173"+
    "\1\67\1\174\1\241\3\67\1\177\3\67\1\0\3\67"+
    "\100\0\1\212\42\0\1\246\50\0\1\212\3\0\1\177"+
    "\45\0\1\212\46\0\1\212\12\0\1\67\1\0\1\67"+
    "\1\0\3\67\6\0\4\67\1\0\3\67\1\0\1\67"+
    "\1\73\1\67\1\0\1\67\2\0\1\67\4\0\1\67"+
    "\1\0\1\67\23\0\5\67\1\242\2\67\1\0\3\67"+
    "\1\0\3\67\3\0\1\247\1\12\1\4\1\12\1\250"+
    "\1\67\1\251\1\12\6\0\1\70\3\12\1\0\1\12"+
    "\1\100\1\72\1\0\1\67\1\73\1\12\1\0\1\12"+
    "\1\66\1\0\1\12\4\0\1\70\1\0\1\12\10\0"+
    "\1\4\12\0\10\12\1\0\3\12\1\0\2\12\1\70"+
    "\4\0\1\67\1\0\1\67\1\0\3\67\6\0\4\67"+
    "\1\0\3\67\1\0\1\67\1\73\1\67\1\0\1\67"+
    "\2\0\1\67\4\0\1\67\1\0\1\67\23\0\5\67"+
    "\1\241\2\67\1\0\3\67\1\0\3\67\3\0\1\167"+
    "\1\67\1\0\1\67\1\0\1\67\1\170\1\67\6\0"+
    "\4\67\1\0\3\67\1\0\1\67\1\73\1\67\1\0"+
    "\1\67\2\0\1\171\4\0\1\67\1\0\1\67\23\0"+
    "\1\67\1\173\1\67\1\174\4\67\1\211\3\67\1\0"+
    "\3\67\41\0\1\200\101\0\1\163\67\0\1\4\1\12"+
    "\1\4\1\12\1\64\1\67\2\12\6\0\1\70\3\12"+
    "\1\0\1\12\1\252\1\72\1\0\1\67\1\73\1\12"+
    "\1\0\1\12\1\66\1\0\1\12\4\0\1\70\1\0"+
    "\1\12\10\0\1\4\12\0\10\12\1\0\3\12\1\0"+
    "\2\12\1\70\3\0\1\4\1\70\1\4\1\214\1\64"+
    "\1\67\1\214\1\70\6\0\2\70\1\214\1\70\1\0"+
    "\1\70\1\67\1\72\1\0\1\67\1\73\1\70\1\0"+
    "\1\70\1\66\1\105\1\70\1\0\1\105\2\0\1\70"+
    "\1\105\1\70\10\0\1\4\12\0\10\70\1\0\3\70"+
    "\1\0\3\70\104\0\1\216\5\0\1\212\113\0\1\212"+
    "\4\0\4\4\1\64\1\0\2\4\6\0\4\4\1\0"+
    "\1\4\1\163\1\65\3\0\1\4\1\0\1\4\1\66"+
    "\1\0\1\4\4\0\1\4\1\0\1\4\10\0\1\4"+
    "\12\0\10\4\1\0\3\4\1\0\3\4\3\0\1\167"+
    "\1\67\1\0\1\67\1\0\1\67\1\170\1\67\6\0"+
    "\4\67\1\0\3\67\1\0\1\67\1\73\1\67\1\0"+
    "\1\67\2\0\1\202\4\0\1\67\1\0\1\67\23\0"+
    "\1\67\1\173\1\67\1\174\4\67\1\216\3\67\1\0"+
    "\1\67\1\241\1\67\27\0\1\215\44\0\1\236\7\0"+
    "\1\216\5\0\1\212\5\0\1\67\1\0\1\67\1\0"+
    "\3\67\6\0\4\67\1\0\1\67\1\253\1\67\1\0"+
    "\1\67\1\73\1\67\1\0\1\67\2\0\1\67\4\0"+
    "\1\67\1\0\1\67\23\0\1\237\7\67\1\216\3\67"+
    "\1\0\1\67\1\241\1\67\27\0\1\215\54\0\1\216"+
    "\5\0\1\212\45\0\1\225\53\0\1\67\1\0\1\67"+
    "\1\0\3\67\6\0\4\67\1\0\3\67\1\0\1\67"+
    "\1\73\1\67\1\0\1\67\2\0\1\67\4\0\1\67"+
    "\1\0\1\67\23\0\10\67\1\0\2\67\1\241\1\0"+
    "\3\67\107\0\1\212\7\0\1\167\1\67\1\0\1\67"+
    "\1\0\1\67\1\170\1\67\6\0\4\67\1\0\3\67"+
    "\1\0\1\67\1\73\1\67\1\0\1\67\2\0\1\202"+
    "\4\0\1\67\1\0\1\67\23\0\1\67\1\173\1\67"+
    "\1\174\3\67\1\241\1\232\3\67\1\0\3\67\103\0"+
    "\1\212\16\0\1\254\110\0\1\163\5\0\1\163\63\0"+
    "\1\255\22\0\1\67\1\0\1\67\1\0\3\67\6\0"+
    "\4\67\1\0\3\67\1\0\1\67\1\73\1\67\1\0"+
    "\1\67\2\0\1\67\4\0\1\67\1\0\1\67\23\0"+
    "\4\67\1\241\3\67\1\177\3\67\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\3\67\6\0\4\67\1\0"+
    "\1\67\1\256\1\67\1\0\1\67\1\73\1\67\1\0"+
    "\1\67\2\0\1\67\4\0\1\67\1\0\1\67\23\0"+
    "\10\67\1\0\3\67\1\0\3\67\4\0\1\67\1\0"+
    "\1\67\1\0\3\67\6\0\4\67\1\0\3\67\1\0"+
    "\1\67\1\73\1\67\1\0\1\67\2\0\1\67\4\0"+
    "\1\67\1\0\1\67\23\0\6\67\1\237\1\67\1\0"+
    "\3\67\1\0\3\67\4\0\1\237\1\0\1\67\1\0"+
    "\3\67\6\0\4\67\1\0\3\67\1\0\1\67\1\73"+
    "\1\67\1\0\1\67\2\0\1\67\4\0\1\67\1\0"+
    "\1\67\23\0\10\67\1\0\3\67\1\0\3\67\4\0"+
    "\1\67\1\0\1\67\1\0\3\67\6\0\4\67\1\0"+
    "\3\67\1\0\1\67\1\73\1\67\1\0\1\67\2\0"+
    "\1\67\4\0\1\67\1\0\1\67\23\0\4\67\1\237"+
    "\3\67\1\0\3\67\1\0\3\67\4\0\1\257\1\0"+
    "\1\257\2\0\2\257\6\0\1\175\3\257\1\0\1\257"+
    "\1\245\1\175\3\0\1\257\1\0\1\257\2\0\1\257"+
    "\4\0\1\175\1\0\1\257\23\0\10\257\1\0\3\257"+
    "\1\0\2\257\1\175\100\0\1\212\3\0\1\177\12\0"+
    "\4\4\1\250\1\0\2\4\6\0\4\4\1\0\1\4"+
    "\1\0\1\65\3\0\1\4\1\0\1\4\1\66\1\0"+
    "\1\4\4\0\1\4\1\0\1\4\10\0\1\4\12\0"+
    "\10\4\1\0\3\4\1\0\3\4\3\0\1\163\5\0"+
    "\1\163\13\0\1\260\46\0\1\164\1\165\5\0\1\166"+
    "\13\0\1\4\1\12\1\4\1\12\1\250\1\67\2\12"+
    "\6\0\1\70\3\12\1\0\1\12\1\100\1\72\1\0"+
    "\1\67\1\73\1\12\1\0\1\12\1\66\1\0\1\12"+
    "\4\0\1\70\1\0\1\12\10\0\1\4\12\0\10\12"+
    "\1\0\3\12\1\0\2\12\1\70\3\0\1\167\1\261"+
    "\1\0\1\261\1\0\1\67\2\261\6\0\4\261\1\0"+
    "\1\261\1\67\1\261\1\0\1\67\1\73\1\261\1\0"+
    "\1\261\2\0\1\261\4\0\1\261\1\0\1\261\23\0"+
    "\10\261\1\0\3\261\1\0\3\261\4\0\1\67\1\0"+
    "\1\67\1\0\3\67\6\0\4\67\1\0\3\67\1\0"+
    "\1\67\1\73\1\67\1\0\1\67\2\0\1\67\4\0"+
    "\1\67\1\0\1\67\23\0\10\67\1\216\3\67\1\0"+
    "\1\67\1\241\1\67\7\0\1\262\207\0\1\165\14\0"+
    "\1\263\1\0\1\263\2\0\2\263\6\0\1\175\3\263"+
    "\1\0\1\263\1\245\1\175\3\0\1\263\1\0\1\263"+
    "\2\0\1\263\4\0\1\175\1\0\1\263\23\0\10\263"+
    "\1\0\3\263\1\0\2\263\1\175\25\0\1\264\72\0"+
    "\1\261\1\0\1\261\1\265\1\67\2\261\6\0\4\261"+
    "\1\266\1\261\1\267\1\261\1\0\1\67\1\73\1\261"+
    "\1\0\1\261\2\0\1\261\4\0\1\261\1\0\1\261"+
    "\23\0\10\261\1\0\3\261\1\0\3\261\4\0\1\270"+
    "\1\0\1\270\1\0\3\270\6\0\4\270\1\0\1\270"+
    "\1\0\1\270\3\0\1\270\1\0\1\270\2\0\1\270"+
    "\4\0\1\270\1\0\1\270\23\0\10\270\1\0\3\270"+
    "\1\0\3\270\4\0\1\271\1\0\1\271\2\0\2\271"+
    "\6\0\1\175\3\271\1\0\1\271\1\245\1\175\3\0"+
    "\1\271\1\0\1\271\2\0\1\271\4\0\1\175\1\0"+
    "\1\271\23\0\10\271\1\0\3\271\1\0\2\271\1\175"+
    "\4\0\1\272\1\0\1\272\2\0\2\272\6\0\4\272"+
    "\1\0\1\272\1\0\1\272\3\0\1\272\1\0\1\272"+
    "\2\0\1\272\4\0\1\272\1\0\1\272\23\0\10\272"+
    "\1\0\3\272\1\0\3\272\21\0\1\273\24\0\1\273"+
    "\44\0\1\273\4\0\1\266\1\0\5\266\6\0\16\266"+
    "\1\0\4\266\2\0\3\266\1\0\1\266\1\0\1\266"+
    "\17\0\10\266\1\0\3\266\1\0\3\266\4\0\1\261"+
    "\1\0\1\261\1\0\1\67\2\261\6\0\4\261\1\0"+
    "\1\261\1\67\1\261\1\0\1\67\1\73\1\261\1\0"+
    "\1\261\2\0\1\261\4\0\1\261\1\0\1\261\23\0"+
    "\10\261\1\0\3\261\1\0\3\261\4\0\1\270\1\0"+
    "\1\270\1\0\3\270\1\274\5\0\4\270\1\0\1\270"+
    "\1\0\1\270\3\0\1\270\1\0\1\270\2\0\1\270"+
    "\4\0\1\270\1\0\1\270\23\0\10\270\1\0\3\270"+
    "\1\0\3\270\4\0\1\275\1\0\1\275\2\0\2\275"+
    "\6\0\1\175\3\275\1\0\1\275\1\245\1\175\3\0"+
    "\1\275\1\0\1\275\2\0\1\275\4\0\1\175\1\0"+
    "\1\275\23\0\10\275\1\0\3\275\1\0\2\275\1\175"+
    "\4\0\1\272\1\0\1\272\1\265\1\0\2\272\6\0"+
    "\4\272\1\266\1\272\1\264\1\272\3\0\1\272\1\0"+
    "\1\272\2\0\1\272\4\0\1\272\1\0\1\272\23\0"+
    "\10\272\1\0\3\272\1\0\3\272\21\0\1\273\3\0"+
    "\1\266\20\0\1\273\44\0\1\273\1\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[12008];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\10\1\1\11\1\1\1\0\24\1\1\11"+
    "\7\1\3\11\6\1\2\0\1\1\2\0\1\1\1\0"+
    "\1\1\1\0\2\1\1\0\1\1\1\0\1\1\1\11"+
    "\2\0\2\1\1\0\1\1\1\0\1\1\3\0\3\1"+
    "\1\0\1\1\2\0\3\1\1\0\1\1\1\0\2\1"+
    "\2\0\1\1\1\0\1\1\2\0\1\1\1\0\2\1"+
    "\1\0\1\1\1\0\3\1\2\0\1\1\2\0\1\11"+
    "\1\0\2\1\14\0\4\1\3\0\3\1\2\0\2\1"+
    "\4\0\2\1\4\0\1\1\1\0\1\1\1\11\1\1"+
    "\1\0\1\1\5\0\1\1\1\0\1\1\4\0\1\1"+
    "\2\0\1\1\1\0\1\1\2\0\1\1\2\0\3\1"+
    "\1\11\1\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[189];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true iff the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true iff the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;
  
  /** 
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */
public ArrayList<Token> readSentence() throws IOException {
    ArrayList<Token> sentence = new ArrayList<Token>();
    Token token, lastNonSpace = null, lastSpace = null;

    while((token = yylex()) != null) {
        if(token.isSpace()) {
            if(token.type == Token.TOK_NEWLINES) {
                if(!sentence.isEmpty()) return sentence;
            }
            lastSpace = token;
        } else {
            if(!sentence.isEmpty()) {
                if(lastNonSpace != null &&
                   lastNonSpace.value.endsWith(".") &&
                   lastNonSpace.value.length() > 1 &&
                   token.isCapitalized())
                {
                    yypushback(yylength());
                    return sentence;
                } else if(token.type == Token.TOK_SENT_FINAL) {
                    if(lastNonSpace != null &&
                       lastNonSpace.value.length() == 1 &&
                       lastNonSpace.isCapitalized())
                    {
                    } else {
                        sentence.add(token);
                        return sentence;
                    }
                }
            }
            sentence.add(token);
            lastNonSpace = token;
        }
    }
    if(sentence.isEmpty()) return null;
    return sentence;
}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public SwedishTokenizer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** 
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 554) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1: 
            { return(new Token(Token.TOK_UNKNOWN,yytext(),yychar));
            } 
            // fall through
          case 21: break;
          case 2: 
            { return(new Token(Token.TOK_SYMBOL,yytext(),yychar));
            } 
            // fall through
          case 22: break;
          case 3: 
            { return(new Token(Token.TOK_LATIN,yytext(),yychar));
            } 
            // fall through
          case 23: break;
          case 4: 
            { return(new Token(Token.TOK_SPACE,yytext(),yychar));
            } 
            // fall through
          case 24: break;
          case 5: 
            { return(new Token(Token.TOK_NEWLINE,yytext(),yychar));
            } 
            // fall through
          case 25: break;
          case 6: 
            { return(new Token(Token.TOK_NUMBER,yytext(),yychar));
            } 
            // fall through
          case 26: break;
          case 7: 
            { return(new Token(Token.TOK_SENT_FINAL,yytext(),yychar));
            } 
            // fall through
          case 27: break;
          case 8: 
            { return(new Token(Token.TOK_DASH,yytext(),yychar));
            } 
            // fall through
          case 28: break;
          case 9: 
            { return(new Token(Token.TOK_GREEK,yytext(),yychar));
            } 
            // fall through
          case 29: break;
          case 10: 
            { return(new Token(Token.TOK_ARABIC,yytext(),yychar));
            } 
            // fall through
          case 30: break;
          case 11: 
            { return(new Token(Token.TOK_NAGARI,yytext(),yychar));
            } 
            // fall through
          case 31: break;
          case 12: 
            { return(new Token(Token.TOK_KANA,yytext(),yychar));
            } 
            // fall through
          case 32: break;
          case 13: 
            { return(new Token(Token.TOK_HANGUL,yytext(),yychar));
            } 
            // fall through
          case 33: break;
          case 14: 
            { return(new Token(Token.TOK_HANZI,yytext(),yychar));
            } 
            // fall through
          case 34: break;
          case 15: 
            { return(new Token(Token.TOK_SMILEY,yytext(),yychar));
            } 
            // fall through
          case 35: break;
          case 16: 
            { return(new Token(Token.TOK_SPACES,yytext(),yychar));
            } 
            // fall through
          case 36: break;
          case 17: 
            { return(new Token(Token.TOK_NEWLINES,yytext(),yychar));
            } 
            // fall through
          case 37: break;
          case 18: 
            { return(new Token(Token.TOK_URL,yytext(),yychar));
            } 
            // fall through
          case 38: break;
          case 19: 
            { return(new Token(Token.TOK_EMAIL,yytext(),yychar));
            } 
            // fall through
          case 39: break;
          case 20: 
            { yychar = -yylength();
                      sentID = yytext().substring(6, yylength()-1);
            } 
            // fall through
          case 40: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
